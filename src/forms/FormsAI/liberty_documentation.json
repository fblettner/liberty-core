[
  {
    "title": "Getting Started",
    "url": "http://docs.nomana-it.fr/liberty/getting-started",
    "content": "Liberty\nGetting Started\nInstallation\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nLiberty Framework\nDocumentation\nüñ®Ô∏è Print this page\nGetting Started\nLiberty Framework\n\nWelcome to Liberty Framework, a no-code development platform designed for rapid and efficient web application creation using the latest in React, Node.js, and PostgreSQL technologies. Whether you're a developer or a non-technical user, Liberty Framework empowers you to build robust applications with zero coding skills required.\n\nGo to Demo\n\n1\n2\n3\nLogin = demo\n\nPassword = demo\n\nAppplication = LIBERTY, NOMASX-1 and NOMAJDE\n\nDocumentation\n\nDownload the complete Liberty Framework User Guide in PDF format:\n\nDownload Liberty Framework User Guide\n\n Back to top"
  },
  {
    "title": "Release Notes",
    "url": "http://docs.nomana-it.fr/liberty/release-notes",
    "content": "Liberty\nGetting Started\nInstallation\nNomasx-1\nRelease Notes\nIssues\nIncidents\nüñ®Ô∏è Print this page\nRelease Notes\n Back to top"
  },
  {
    "title": "Installation > Architecture",
    "url": "http://docs.nomana-it.fr/liberty/technical/architecture",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\n1. Node.js Service (liberty-node) üü¢\n2. PostgreSQL Service (liberty-pg) üêò\n3. pgAdmin Service (liberty-pgadmin) üñ•Ô∏è\n4. Airflow Service (liberty-airflow) üõ†Ô∏è\n5. OIDC Service (liberty-keycloak) üîê\n6. Gitea Service (liberty-gitea) üìÇ\nVolumes üóÉÔ∏è\nNetworks üåê\nüñ®Ô∏è Print this page\nArchitecture\n\nThis document provides an overview of the functionality and configuration of the services within the Liberty Framework, including Node.js, PostgreSQL, pgAdmin, Airflow, OIDC, and Gitea. These services are integrated with Traefik as a reverse proxy, enabling both HTTP and HTTPS access with automated routing.\n\n1. Node.js Service (liberty-node) üü¢\nImage: ghcr.io/fblettner/liberty-node:latest\nCommand: Runs the Node.js app (app.js) on port 3002.\nSecurity Options:\nüîí label:disable: Disables SELinux labels.\n‚öôÔ∏è cap_drop: Removes unnecessary Linux capabilities like MKNOD and AUDIT_WRITE.\nNetworks: Connected to the liberty-network.\nWorking Directory: /opt/liberty\nDepends on: PostgreSQL (pg) service.\nTraefik Configuration:\nüåê API Routing: HTTP and HTTPS routing for /api using PathPrefix.\nüì° Socket Routing: HTTP and HTTPS routing for /socket and /socket.io.\n‚öõÔ∏è React Application: Handles HTTP and HTTPS routing for the React app with a middleware for error pages.\nüöÄ Compression: compress-middleware applied to several routes for better performance.\nüîå Port Configuration: Node.js runs on port 3002.\n2. PostgreSQL Service (liberty-pg) üêò\nImage: ghcr.io/fblettner/liberty-pg:latest\nCommand: Runs the PostgreSQL server with optimized settings for performance:\nshared_buffers=2GB\ntrack_activity_query_size=1MB\nwork_mem=256MB\nmaintenance_work_mem=128MB\nOther configurations to optimize WAL size, checkpoint timing, and costs.\nVolumes: Data stored in the pg-data volume.\nNetworks: Connected to liberty-network.\nTraefik Configuration:\nüõ†Ô∏è TCP Router: Routes PostgreSQL traffic via db entry point.\nüîå Port: Exposed on port 5432.\n3. pgAdmin Service (liberty-pgadmin) üñ•Ô∏è\nImage: ghcr.io/fblettner/liberty-pgadmin:latest\nUser: Root privileges enabled.\nVolumes: pgAdmin data stored in the pgadmin-data volume.\nEnvironment: Sets the SCRIPT_NAME=/pgadmin for pgAdmin web access.\nDepends on: PostgreSQL (pg).\nNetworks: Connected to liberty-network.\nTraefik Configuration:\nüåê HTTP Router: Routes requests for /pgadmin.\nüîå Port: Exposed on port 3003.\n4. Airflow Service (liberty-airflow) üõ†Ô∏è\nImage: ghcr.io/fblettner/liberty-airflow:latest\nSecurity Options:\nüîí Disables SELinux labels.\n‚öôÔ∏è Drops capabilities MKNOD and AUDIT_WRITE.\nVolumes:\nLogs stored in the airflow-logs volume.\nDepends on: PostgreSQL (pg), Gitea (gitea).\nNetworks: Connected to liberty-network.\nTraefik Configuration:\nüåê Routing: Handles HTTP and HTTPS requests for /airflow/home.\n‚ö†Ô∏è Error Pages Middleware: Applied to both HTTP and HTTPS routes.\nüîå Port: Exposed on port 8080.\n5. OIDC Service (liberty-keycloak) üîê\nImage: ghcr.io/fblettner/liberty-keycloak:latest\nCommand: Starts the Keycloak OIDC server with proxy headers and hostname settings.\nEnvironment Variables:\nüîÑ PROXY_ADDRESS_FORWARDING: Enables proxy address forwarding.\nüåç KC_HOSTNAME_PATH and KC_HTTP_RELATIVE_PATH: Configured to /oidc.\nDepends on: PostgreSQL (pg).\nNetworks: Connected to liberty-network.\nTraefik Configuration:\nüåê HTTP and HTTPS Routing: Routes /oidc requests.\nüîå Port: OIDC runs on port 9000 (Keycloak internally uses port 8080).\nüåç CORS Middleware: Configures Cross-Origin Resource Sharing (CORS) for all origins and credentials.\n6. Gitea Service (liberty-gitea) üìÇ\nImage: ghcr.io/fblettner/liberty-gitea:latest\nHealthcheck: Ensures service health by checking / endpoint every 30 seconds.\nVolumes:\nConfiguration and data in liberty-gitea.\nRestart Policy: Set to unless-stopped.\nNetworks: Connected to liberty-network.\nTraefik Configuration:\nüåê Routing: Routes HTTP requests to /gitea.\nüõ†Ô∏è Middleware: Uses stripprefix to remove /gitea from the path for internal routing.\nüîå Port: Exposed on port 3000.\nVolumes üóÉÔ∏è\nnode-logs: Stores Logs for backend and frontend.\npg-data: Stores PostgreSQL data.\npg-logs: Stores Logs for database.\npgadmin-data: Stores pgAdmin data.\nliberty-gitea: Stores gitea config and data.\nairflow-logs: Stores logs for Airflow.\nairflow-dags: Stores Dags for Airflow.\nairflow-plugins: Stores Plugins for Airflow.\ntraefik-certs: Stores Traefik certificates (external).\ntraefik-config: Stores Traefik configuration (external).\nshared-data: Stores shared data (external).\nNetworks üåê\nliberty-network: External network for inter-service communication.\n\nThis configuration enables a scalable, containerized microservice architecture with Node.js for application logic, PostgreSQL for database management, pgAdmin for database administration, Airflow for automation, Keycloak OIDC for authentication, and Gitea for file management and versioning. Traefik serves as the reverse proxy, handling routing and applying security middleware for all services.\n\n Back to top"
  },
  {
    "title": "Installation > Docker Installation Guide",
    "url": "http://docs.nomana-it.fr/liberty/technical/installation",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nDocker Installation for CentOS\nPrerequisites\nStep 1: Update System Packages\nStep 2: Install Required Dependencies\nStep 3: Set Up the Docker Repository\nStep 4: Install Docker\nStep 5: Start and Enable Docker\nStep 6: Verify Docker Installation\nStep 7: Adding Your User to the Docker Group (Optional)\nUninstall Docker\nDocker Installation for Amazon Linux OS\nPrerequisites\nStep 1: Update System Packages\nStep 2: Install Docker\nStep 3: Start and Enable Docker\nStep 4: Verify Docker Installation\nStep 5: Install Docker Compose\nStep 6: Adding Your User to the Docker Group (Optional)\nUninstall Docker\nPost installation Tasks\nConclusion\nReferences\nüñ®Ô∏è Print this page\nDocker Installation Guide\n\nThis guide covers the installation of Docker and Docker Compose on CentOS and Amazon Linux. Follow the respective instructions based on your environment.\n\nDocker Installation for CentOS\nPrerequisites\nCentOS 8 or higher\nRoot or sudo access\nMinimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.\nStep 1: Update System Packages\n\nBefore starting the installation, update your system to ensure all packages are up-to-date.\n\n1\nsudo yum update -y\n\n\nif Podman is installed, remove all packages, artifacts and containers storage\n\n1\n2\n3\nyum remove buildah skopeo podman containers-common atomic-registries docker container-tools\n\nrm -rf /etc/containers/* /var/lib/containers/* /etc/docker /etc/subuid* /etc/subgid*\n\ncd ~ && rm -rf /.local/share/containers/\n\nStep 2: Install Required Dependencies\n\nInstall the necessary packages required to set up the Docker repository.\n\n1\nsudo yum install -y yum-utils \n\nStep 3: Set Up the Docker Repository\n\nAdd the Docker repository to your CentOS system.\n\n1\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\nStep 4: Install Docker\n\nInstall Docker Engine, CLI, and Containerd.\n\n1\nsudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\nStep 5: Start and Enable Docker\n\nStart the Docker service and enable it to start on boot.\n\n1\n2\nsudo systemctl start docker\n\nsudo systemctl enable docker\n\nStep 6: Verify Docker Installation\n\nVerify the installation by running a test Docker container.\n\n1\nsudo docker run hello-world\n\n\nIf the container runs and displays a welcome message, Docker is installed correctly.\n\nStep 7: Adding Your User to the Docker Group (Optional)\n\nTo run Docker commands without sudo, add your user to the Docker group.\n\n1\nsudo usermod -aG docker $(whoami)\n\n\nLog out and log back in to apply the group changes.\n\nUninstall Docker\n\nTo remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:\n\n1\n2\n3\nsudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n\nsudo rm -rf /var/lib/docker\n\nsudo rm -rf /var/lib/containerd\n\nDocker Installation for Amazon Linux OS\nPrerequisites\nAmazon Linux or Amazon Linux 2\nRoot or sudo access\nMinimum 2GB of RAM recommended, 8GB of RAM recommended for all Liberty Framework Services.\nStep 1: Update System Packages\n\nBefore starting the installation, update your system to ensure all packages are up-to-date.\n\n1\nsudo yum update -y\n\nStep 2: Install Docker\n\nInstall Docker using the Amazon Linux Extras & yum package manager.\n\n1\nsudo amazon-linux-extras install docker -y\n\nStep 3: Start and Enable Docker\n\nStart the Docker service and enable it to start on boot.\n\n1\n2\nsudo systemctl start docker\n\nsudo systemctl enable docker\n\nStep 4: Verify Docker Installation\n\nVerify the installation by running a test Docker container.\n\n1\nsudo docker run hello-world\n\n\nIf the container runs and displays a welcome message, Docker is installed correctly.\n\nStep 5: Install Docker Compose\n\nDownload the current stable release of Docker Compose:\n\n1\nsudo curl -L \"https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '\"tag_name\": \"\\K.*?(?=\")')/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n\nApply executable permissions to the binary:\n\n1\nsudo chmod +x /usr/local/bin/docker-compose\n\n\nVerify that the installation was successful:\n\n1\ndocker-compose --version\n\nStep 6: Adding Your User to the Docker Group (Optional)\n\nTo run Docker commands without sudo, add your user to the Docker group.\n\n1\nsudo usermod -aG docker $(whoami)\n\n\nLog out and log back in to apply the group changes.\n\nUninstall Docker\n\nTo remove Docker, the CLI, Containerd, and Docker Compose, use the following commands:\n\n1\n2\n3\nsudo yum remove docker\n\nsudo rm -rf /var/lib/docker\n\nsudo rm /usr/local/bin/docker-compose\n\nPost installation Tasks\n\nIf you want to set a custom directory for docker and if you are running behind a proxy, the docker service must be modified\n\nEdit the service: /lib/systemd/system/docker.service\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n[Service]\n\nType=notify\n\n# the default is not to use systemd for cgroups because the delegate issues still\n\n# exists and systemd currently does not support the cgroup feature set required\n\n# for containers run by docker\n\nExecStart=/usr/bin/dockerd --data-root <CUSTOM_DIRECTORY> -H fd:// --containerd=/run/containerd/containerd.sock\n\nExecReload=/bin/kill -s HUP $MAINPID\n\nTimeoutStartSec=0\n\nRestartSec=2\n\nRestart=always\n\nEnvironment=\"HTTP_PROXY=<PROXY_URL>\"\n\nEnvironment=\"HTTPS_PROXY=<PROXY_URL>\"\n\n\nIf you want to change the default IP range (172.17.x.x) for docker Edit the file: /etc/docker/daemon.json\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n# Set the ip range according to your requirements\n\n# bip is for the internal interface\n\n# default-address-pools is for all new networks\n\n{\n\n  \"bip\": \"172.26.0.1/16\",\n\n  \"default-address-pools\": [\n\n    { \"base\": \"172.27.0.0/16\", \"size\": 24 }\n\n  ]\n\n}\n\nConclusion\n\nYou have successfully installed Docker and Docker Compose on your CentOS or Amazon Linux OS system. You can now begin deploying and managing your Docker containers for Liberty Framework.\n\nReferences\nDocker Documentation\nAWS Documentation\n Back to top"
  },
  {
    "title": "Installation > Installation Tools Deployment Guide",
    "url": "http://docs.nomana-it.fr/liberty/technical/tools-deployment",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nPrerequisites\nStep 1: Logging into Docker\nStep 2: Create a Directory for Deployment\nStep 3: Download the Docker Compose File\nStep 4: Deploy the Docker Container using Docker Compose\nStep 5: Verify the Deployment\nSummary of Commands\nAccessing Services\nüñ®Ô∏è Print this page\nDeploying Installation Tools with Docker Compose\nPrerequisites\n\nBefore we begin, ensure you have the following installed on your system:\n\nDocker and Docker Compose: Installation instructions can be found here.\nGit: Installation instructions can be found here.\nStep 1: Logging into Docker\n\nTo access a private Docker registry, you'll need to authenticate with your Docker credentials.\n\nLog in to Docker:\n1\ndocker login\n\nFollow the prompts to enter your Docker username and password.\nStep 2: Create a Directory for Deployment\n\nCreate a directory where you will download and store the Docker Compose file.\n\nOpen a terminal.\nCreate a new directory:\n1\n2\nmkdir -p /app/liberty-admin\n\ncd /app/liberty-admin\n\nStep 3: Download the Docker Compose File\n\nNext, download the Docker Compose file from the provided URL.\n\nUsing curl:\n\n1\ncurl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n\n\nAlternatively, using wget:\n\n1\nwget -O docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-admin.yml\n\n\nStep 4: Deploy the Docker Container using Docker Compose\n\nOnce you have the docker-compose.yml file downloaded into your liberty-admin directory, use Docker Compose to deploy the container.\n\nIn the terminal, navigate to the liberty-admin directory (if not already there):\n\n1\ncd /app/liberty-admin\n\n\nDeploy the Docker container:\n\n1\ndocker-compose up -d\n\n\nThis command will pull the necessary images from the registry (if they are not already available locally) and start the containers in detached mode.\n\nStep 5: Verify the Deployment\n\nTo ensure the deployment is successful, you can check the status of the containers.\n\nList the running containers:\n1\ndocker ps\n\n\nYou should see the following containers running as defined in the docker-compose.yml file:\n\ntraefik: This service is managing routing and load balancing, and exposes several endpoints for web (port 3000), websecure (port 3443), dashboard (port 8080), and database (port 5432).\nportainer: This service provides a UI for managing Docker environments, accessible via paths prefixed with /portainer.\nerror-pages: This service handles error pages and is available to respond to general HTTP requests.\nSummary of Commands\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n# Log in to Docker\n\ndocker login\n\n\n\n# Create and navigate to the admin directory\n\nmkdir -p /app/liberty-admin\n\ncd /app/liberty-admin\n\n\n\n# Download the Docker Compose file\n\ncurl -L -o docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n\n# or using wget\n\nwget -O docker-compose.yml https://raw.githubusercontent.com/fblettner/liberty-public/release/latest/liberty-admin.yml\n\n\n\n# Deploy the Docker container\n\ndocker-compose up -d\n\nAccessing Services\n\nAfter deployment, you can access the services with the following URLs:\n\nTraefik Dashboard: Accessible at http://<your_server_ip>:8080/dashboard/ (authentication may be required).\nPortainer: Accessible at http://<your_server_ip>:3000/portainer or https://<your_server_ip>:3443/portainer.\n\nReplace <your_server_ip> with the IP address or hostname of your server. Feel free to reach out if you have any further questions or run into any issues!\n\n Back to top"
  },
  {
    "title": "Installation > Liberty Deployment Guide",
    "url": "http://docs.nomana-it.fr/liberty/technical/liberty-deployment",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nPrerequisites\nAccessing Portainer\nLogging into a Custom Registry\nDeploy the Stack\nVerify Deployment\nAlternative: Pull Docker Images from Terminal\nSteps for AWS Users\nAdditional Resources\nSummary\nüñ®Ô∏è Print this page\nDeploying Liberty Framework with Portainer\n\nThis guide will walk you through deploying Liberty Framework using Portainer, based on the Compose file located at the following URL: liberty-framework.yml.\n\nPrerequisites\n\nBefore you begin, ensure the following prerequisites are met:\n\nYou have Docker installed and running on your server. Installation instructions can be found here.\nYou have Portainer installed and running on your server. Installation instructions can be found here.\nYou have access to the Portainer web interface. The URL typically looks like http://your-server-ip:3000 or https://your-server-ip:3443.\nAccessing Portainer\n\nOpen a web browser and navigate to the Portainer web interface.\n\nLog in with your Portainer credentials.\n\nSet a password first time you log into Portainer\n\nLogging into a Custom Registry\n\nIn the Portainer web interface, navigate to Registries from the sidebar.\n\nClick on the + Add registry button.\n\nProvide the following details for your custom registry:\n\nName: A friendly name for your registry.\nURL: The URL of your custom registry (e.g., ghcr.io/fblettner).\nUsername: Your registry username (this user will be provided by Nomana-IT).\nPassword: Your registry password (this token will be provided by Nomana-IT).\n\nAfter filling in the details, click on the Add Registry button to save the registry.\n\nDeploy the Stack\n\nIn the Portainer web interface, navigate to Stacks from the sidebar.\n\nClick on the + Add Stack button.\n\nProvide a name for your stack in the Name field.\n\nUnder the Git repository tab:\n\nEnter the Repository URL:\n\n1\nhttps://github.com/fblettner/liberty-public\n\n\nIn the Compose path field, specify:\n\n1\nrelease/latest/liberty-framework.yml\n\n\nScroll down and click on the Deploy the stack button.\n\nVerify Deployment\n\nOnce the stack is deployed, navigate to Containers from the sidebar.\n\nVerify that the containers listed in the Compose file are running.\n\nAccess the services through the designated ports to ensure everything is functioning as expected.\n\nAlternative: Pull Docker Images from Terminal\n\nIf you prefer to pull Docker images directly from the terminal, you can do so using the following commands:\n\nOpen a terminal and log in to the custom registry:\n\n1\ndocker login ghcr.io\n\n\nWhen prompted, enter your username and password (token).\n\nPull the required Docker images manually:\n\n1\n2\n3\n4\n5\n6\ndocker pull ghcr.io/fblettner/liberty-node:latest\n\ndocker pull ghcr.io/fblettner/liberty-pg:latest\n\ndocker pull ghcr.io/fblettner/liberty-pgadmin:latest\n\ndocker pull ghcr.io/fblettner/liberty-rundeck:latest\n\ndocker pull ghcr.io/fblettner/liberty-keycloak:latest\n\ndocker pull ghcr.io/fblettner/liberty-filebrowser:latest\n\nSteps for AWS Users\n\nIf you are using AWS and need to connect via AWS CLI, follow these steps:\n\nConfigure your AWS CLI:\n\n1\naws configure\n\n\nFollow the prompts to enter your AWS Access Key, Secret Access Key, default region name, and output format.\n\nLog in to the AWS Elastic Container Registry (ECR):\n\n1\naws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin <your-aws-account-id>.dkr.ecr.eu-west-1.amazonaws.com\n\n\nReplace <your-aws-account-id> with your actual AWS account ID.\n\nAdditional Resources\nPortainer Documentation\nDocker Compose Documentation\nGitHub Repository - liberty-framework.yml\n\nBy following this guide, you should be able to deploy Liberty Framework using Portainer seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.\n\nSummary\n\nURLs: - Web Application: / - API: /api - PgAdmin: /pgadmin - Rundeck: /rundeck - OIDC: /oidc - Filebrowser: /filebrowser\n\nServices: - node: ghcr.io/fblettner/liberty-node:latest (Port 3002) - pg: ghcr.io/fblettner/liberty-pg:latest (Port 5432) - pgadmin: ghcr.io/fblettner/liberty-pgadmin:latest (Port 3003) - rundeck: ghcr.io/fblettner/liberty-rundeck:latest (Port 4440) - oidc: ghcr.io/fblettner/liberty-keycloak:latest (Port 8080) - filebrowser: ghcr.io/fblettner/liberty-filebrowser:latest (Port 80)\n\nDetails of all Liberty Framework Services can be found here.\n\n Back to top"
  },
  {
    "title": "Installation > Create Linux Services",
    "url": "http://docs.nomana-it.fr/liberty/technical/linux-services",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nPrerequisites\nCreating the Systemd Service for Admin Tools\nCreating the Systemd Service for Liberty Framework\nEnabling and Starting the Services\nAdditional Resources\nüñ®Ô∏è Print this page\nCreating Systemd Services for Docker Compose\n\nThis guide will walk you through creating systemd services to manage your Docker Compose deployments. This ensures that your services start automatically on boot and can be managed easily using standard systemd commands.\n\nPrerequisites\n\nBefore you begin, ensure the following prerequisites are met:\n\nYou have Docker and Docker Compose installed on your server.\nYou have completed the deployment steps for Liberty Framework using Docker Compose.\nCreating the Systemd Service for Admin Tools\n\nCreate a service file for docker-admin:\n\n1\nsudo nano /etc/systemd/system/docker-admin.service\n\n\nPaste the following content into the file:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n[Unit]\n\nDescription=Liberty Admin Tools Service\n\nPartOf=docker.service\n\nAfter=docker.service\n\n\n\n[Service]\n\nType=simple\n\nRemainAfterExit=true\n\nWorkingDirectory=/app/liberty-admin/\n\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml start\n\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-admin/docker-compose.yml stop\n\n\n\n[Install]\n\nWantedBy=multi-user.target\n\n\nSave and close the file.\n\nCreating the Systemd Service for Liberty Framework\nOpen a terminal.\n\nCreate a new directory:\n\n1\n2\nmkdir -p /app/liberty-framework\n\ncd /app/liberty-framework\n\n\nDownload the Docker Compose file from the provided URL, Using curl:\n\n1\ncurl -L -o docker-compose.yml https://github.com/fblettner/liberty-public/blob/main/release/latest/liberty-framework.yml\n\n\nCreate a service file for docker-liberty:\n\n1\nsudo nano /etc/systemd/system/docker-liberty.service\n\n\nPaste the following content into the file:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n[Unit]\n\nDescription=Liberty Framework Service\n\nPartOf=docker.service\n\nAfter=docker.service\n\n\n\n[Service]\n\nType=simple\n\nRemainAfterExit=true\n\nWorkingDirectory=/app/liberty/\n\nExecStart=/usr/local/bin/docker-compose -f /app/liberty-framework/docker-compose.yml start\n\nExecStop=/usr/local/bin/docker-compose -f /app/liberty-framework/liberty-compose.yaml stop\n\n\n\n[Install]\n\nWantedBy=multi-user.target\n\n\nSave and close the file.\n\nEnabling and Starting the Services\n\nEnable the created services to start on boot:\n\n1\n2\nsudo systemctl enable docker-liberty.service\n\nsudo systemctl enable docker-admin.service\n\n\nStart the services immediately:\n\n1\n2\nsudo systemctl start docker-liberty.service\n\nsudo systemctl start docker-admin.service\n\n\nCheck the status of the services to ensure they are running:\n\n1\n2\nsudo systemctl status docker-liberty.service\n\nsudo systemctl status docker-admin.service\n\nAdditional Resources\nSystemd Documentation\nDocker Documentation\nDocker Compose Documentation\n\nBy following this guide, you should be able to create and manage systemd services for your Docker Compose deployments seamlessly. If you run into any issues or have any questions, refer to the additional resources provided or reach out to the respective support communities.\n\n Back to top"
  },
  {
    "title": "Installation > Enable SSL with Traefik",
    "url": "http://docs.nomana-it.fr/liberty/technical/post-ssl",
    "content": "Liberty\nGetting Started\nInstallation\nArchitecture\nDocker Installation Guide\nInstallation Tools Deployment Guide\nLiberty Deployment Guide\nCreate Linux Services\nEnable SSL with Traefik\nNomasx-1\nRelease Notes\nIssues\nIncidents\nTable of contents\nPrerequisites:\nStep 1: Copy your certificates files\nStep2: Create a self-signed certificate (optional)\nüñ®Ô∏è Print this page\nEnable SSL with Traefik\n\nBy default, SSL is enabled with a self signed certificate. You have to copy your own certificates according to your domain\n\nPrerequisites:\nmkcert installed to create a new self-signed certificate.\nCertificates for your domain\nStep 1: Copy your certificates files\n\nCopy your certificates files to the server hosting Liberty Framework\n\nTransfer you certificate to the Docker container\n\n1\n2\ndocker cp <your_certificate_directory>/cert.pem traefik:/etc/certs/cert.pem\n\ndocker cp <your_certificate_directory>/key.pem traefik:/etc/certs/key.pem\n\n\nFinal Administrator Note: Certificates must be transferred to the Docker container with each renewal\n\nStep2: Create a self-signed certificate (optional)\n\nConnect to the server hosting Liberty Framework\n\nCreate a new self signed certificate\n\n1\nmkcert -key-file ./certs/key.pem -cert-file ./certs/cert.pem '<server_name>'\n\n\nTransfer you certificate to the Docker container\n\n1\n2\ndocker cp ./certs/cert.pem traefik:/etc/certs/cert.pem\n\ndocker cp ./certs/key.pem traefik:/etc/certs/key.pem\n\n\nFinal Administrator Note: After updating both files, it is required to restart the Traefik service to apply the new settings.\n\n Back to top"
  },
  {
    "title": "Nomasx-1 > Administrator's Guide > Global Settings",
    "url": "http://docs.nomana-it.fr/liberty/nomasx1/admin/global-settings",
    "content": "Liberty\nGetting Started\nInstallation\nNomasx-1\nAdministrator's Guide\nGlobal Settings\nRelease Notes\nIssues\nIncidents\nTable of contents\nGlobal Settings\n1. Applications\n1.1. Global Settings\n1.2. Connections\n1.3. Options\n1.3.1. JD Edwards\n1.3.2. Database / Custom Application\n1.3.3. LDAP\n2. Users\n3. Query\n4. DWH\nüñ®Ô∏è Print this page\nGlobal Settings\nGlobal Settings\n1. Applications\nNative connector for JD Edwards (Oracle, DB2 or MS-SQL)\nNative connector for Oracle Database\nNative connector for Microsoft Active Directory\nAll databases accessibles with jdbc can be set\n\nClick on add or edit to set a new datasource or modify an existing datasource and follow the wizard\n\n1.1. Global Settings\n\nParameter\tDescription\tComments\nApplication ID\tUnique ID\tAutomatic increment number used in all table joins\nApplication Name\tName of your application\t\nApplication Type\tNative or custom connector\tJD Edwards, Database, LDAP, Weblogic, Custom Application\nDatabase\tType of database\tOracle, MySQL, IBM DB2, Microsoft SQL Server, LDAP\n1.2. Connections\n\nSome parameters could be hidden depending on the type of the application\n\nParameter\tDescription\tComments\nHost\tDatabase server\t\nPort\tDatabase port\t\nDatabase\tService Name\tService Name and not SID for Oracle later than 12.2\nUser\tLogin to database\tlogin could have read-only rights but with access to dictionary or catalog\nPassword\tPassword for the user\t\n1.3. Options\n\nParameters differs depending on the type of the application\n\n1.3.1. JD Edwards\n\nParameter\tDescription\tComments\nJDE DTA\tBusiness Data\tPRODDTA\nJDE CTL\tControl Tables\tPRODCTL\nJDE CO\tCentral Objects\tPD920\nJDE SY\tSystem Tables\tSY920\nJDE SVM\tServer Map\tSVM920\nJDE OL\tObject Librarian\tOL920\nF00950\tSecurity table location (sometimes not in SYSTEM)\tSY920\nStandard Menu (Y/N)\tCollect Tasks Menus\t\nE1 Pages (Y/N)\tCollect E1 Pages\tBefore Tools Release 9.2 and E1 composite\nE1 Composite (Y/N)\tCollect E1 Composite Pages\tAfter Tools Release 9.2\n1.3.2. Database / Custom Application\n\nNONE\n\n1.3.3. LDAP\nParameter\tDescription\tComments\nLDAP Context\tSearch\tOU=Utilisateurs,DC=nomana-it,DC=fr\nLDAP Filter\tFiltering type of object\t(&(objectClass=user))\nLDAP Exclude\tExclude node\tOU=Applications,OU=Utilisateurs,DC=nomana-it,DC=fr\n2. Users\n3. Query\n4. DWH\n Back to top"
  }
]